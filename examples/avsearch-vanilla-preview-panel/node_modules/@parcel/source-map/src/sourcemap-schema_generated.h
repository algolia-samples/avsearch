// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SOURCEMAPSCHEMA_SOURCEMAPSCHEMA_H_
#define FLATBUFFERS_GENERATED_SOURCEMAPSCHEMA_SOURCEMAPSCHEMA_H_

#include "flatbuffers/flatbuffers.h"

namespace SourceMapSchema {

struct Mapping;

struct MappingLine;
struct MappingLineBuilder;

struct Map;
struct MapBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Mapping FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t generatedLine_;
  int32_t generatedColumn_;
  int32_t originalLine_;
  int32_t originalColumn_;
  int32_t source_;
  int32_t name_;

 public:
  Mapping() {
    memset(static_cast<void *>(this), 0, sizeof(Mapping));
  }
  Mapping(int32_t _generatedLine, int32_t _generatedColumn, int32_t _originalLine, int32_t _originalColumn, int32_t _source, int32_t _name)
      : generatedLine_(flatbuffers::EndianScalar(_generatedLine)),
        generatedColumn_(flatbuffers::EndianScalar(_generatedColumn)),
        originalLine_(flatbuffers::EndianScalar(_originalLine)),
        originalColumn_(flatbuffers::EndianScalar(_originalColumn)),
        source_(flatbuffers::EndianScalar(_source)),
        name_(flatbuffers::EndianScalar(_name)) {
  }
  int32_t generatedLine() const {
    return flatbuffers::EndianScalar(generatedLine_);
  }
  int32_t generatedColumn() const {
    return flatbuffers::EndianScalar(generatedColumn_);
  }
  int32_t originalLine() const {
    return flatbuffers::EndianScalar(originalLine_);
  }
  int32_t originalColumn() const {
    return flatbuffers::EndianScalar(originalColumn_);
  }
  int32_t source() const {
    return flatbuffers::EndianScalar(source_);
  }
  int32_t name() const {
    return flatbuffers::EndianScalar(name_);
  }
};
FLATBUFFERS_STRUCT_END(Mapping, 24);

struct MappingLine FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MappingLineBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LINENUMBER = 4,
    VT_ISSORTED = 6,
    VT_SEGMENTS = 8
  };
  int32_t lineNumber() const {
    return GetField<int32_t>(VT_LINENUMBER, 0);
  }
  bool isSorted() const {
    return GetField<uint8_t>(VT_ISSORTED, 0) != 0;
  }
  const flatbuffers::Vector<const SourceMapSchema::Mapping *> *segments() const {
    return GetPointer<const flatbuffers::Vector<const SourceMapSchema::Mapping *> *>(VT_SEGMENTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_LINENUMBER) &&
           VerifyField<uint8_t>(verifier, VT_ISSORTED) &&
           VerifyOffset(verifier, VT_SEGMENTS) &&
           verifier.VerifyVector(segments()) &&
           verifier.EndTable();
  }
};

struct MappingLineBuilder {
  typedef MappingLine Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_lineNumber(int32_t lineNumber) {
    fbb_.AddElement<int32_t>(MappingLine::VT_LINENUMBER, lineNumber, 0);
  }
  void add_isSorted(bool isSorted) {
    fbb_.AddElement<uint8_t>(MappingLine::VT_ISSORTED, static_cast<uint8_t>(isSorted), 0);
  }
  void add_segments(flatbuffers::Offset<flatbuffers::Vector<const SourceMapSchema::Mapping *>> segments) {
    fbb_.AddOffset(MappingLine::VT_SEGMENTS, segments);
  }
  explicit MappingLineBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MappingLineBuilder &operator=(const MappingLineBuilder &);
  flatbuffers::Offset<MappingLine> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MappingLine>(end);
    return o;
  }
};

inline flatbuffers::Offset<MappingLine> CreateMappingLine(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t lineNumber = 0,
    bool isSorted = false,
    flatbuffers::Offset<flatbuffers::Vector<const SourceMapSchema::Mapping *>> segments = 0) {
  MappingLineBuilder builder_(_fbb);
  builder_.add_segments(segments);
  builder_.add_lineNumber(lineNumber);
  builder_.add_isSorted(isSorted);
  return builder_.Finish();
}

inline flatbuffers::Offset<MappingLine> CreateMappingLineDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t lineNumber = 0,
    bool isSorted = false,
    const std::vector<SourceMapSchema::Mapping> *segments = nullptr) {
  auto segments__ = segments ? _fbb.CreateVectorOfStructs<SourceMapSchema::Mapping>(*segments) : 0;
  return SourceMapSchema::CreateMappingLine(
      _fbb,
      lineNumber,
      isSorted,
      segments__);
}

struct Map FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MapBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAMES = 4,
    VT_SOURCES = 6,
    VT_SOURCESCONTENT = 8,
    VT_LINECOUNT = 10,
    VT_LINES = 12
  };
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *names() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_NAMES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *sources() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_SOURCES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *sourcesContent() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_SOURCESCONTENT);
  }
  int32_t lineCount() const {
    return GetField<int32_t>(VT_LINECOUNT, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<SourceMapSchema::MappingLine>> *lines() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SourceMapSchema::MappingLine>> *>(VT_LINES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAMES) &&
           verifier.VerifyVector(names()) &&
           verifier.VerifyVectorOfStrings(names()) &&
           VerifyOffset(verifier, VT_SOURCES) &&
           verifier.VerifyVector(sources()) &&
           verifier.VerifyVectorOfStrings(sources()) &&
           VerifyOffset(verifier, VT_SOURCESCONTENT) &&
           verifier.VerifyVector(sourcesContent()) &&
           verifier.VerifyVectorOfStrings(sourcesContent()) &&
           VerifyField<int32_t>(verifier, VT_LINECOUNT) &&
           VerifyOffset(verifier, VT_LINES) &&
           verifier.VerifyVector(lines()) &&
           verifier.VerifyVectorOfTables(lines()) &&
           verifier.EndTable();
  }
};

struct MapBuilder {
  typedef Map Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_names(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> names) {
    fbb_.AddOffset(Map::VT_NAMES, names);
  }
  void add_sources(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> sources) {
    fbb_.AddOffset(Map::VT_SOURCES, sources);
  }
  void add_sourcesContent(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> sourcesContent) {
    fbb_.AddOffset(Map::VT_SOURCESCONTENT, sourcesContent);
  }
  void add_lineCount(int32_t lineCount) {
    fbb_.AddElement<int32_t>(Map::VT_LINECOUNT, lineCount, 0);
  }
  void add_lines(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SourceMapSchema::MappingLine>>> lines) {
    fbb_.AddOffset(Map::VT_LINES, lines);
  }
  explicit MapBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MapBuilder &operator=(const MapBuilder &);
  flatbuffers::Offset<Map> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Map>(end);
    return o;
  }
};

inline flatbuffers::Offset<Map> CreateMap(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> names = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> sources = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> sourcesContent = 0,
    int32_t lineCount = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SourceMapSchema::MappingLine>>> lines = 0) {
  MapBuilder builder_(_fbb);
  builder_.add_lines(lines);
  builder_.add_lineCount(lineCount);
  builder_.add_sourcesContent(sourcesContent);
  builder_.add_sources(sources);
  builder_.add_names(names);
  return builder_.Finish();
}

inline flatbuffers::Offset<Map> CreateMapDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *names = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *sources = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *sourcesContent = nullptr,
    int32_t lineCount = 0,
    const std::vector<flatbuffers::Offset<SourceMapSchema::MappingLine>> *lines = nullptr) {
  auto names__ = names ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*names) : 0;
  auto sources__ = sources ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*sources) : 0;
  auto sourcesContent__ = sourcesContent ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*sourcesContent) : 0;
  auto lines__ = lines ? _fbb.CreateVector<flatbuffers::Offset<SourceMapSchema::MappingLine>>(*lines) : 0;
  return SourceMapSchema::CreateMap(
      _fbb,
      names__,
      sources__,
      sourcesContent__,
      lineCount,
      lines__);
}

inline const SourceMapSchema::Map *GetMap(const void *buf) {
  return flatbuffers::GetRoot<SourceMapSchema::Map>(buf);
}

inline const SourceMapSchema::Map *GetSizePrefixedMap(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<SourceMapSchema::Map>(buf);
}

inline bool VerifyMapBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SourceMapSchema::Map>(nullptr);
}

inline bool VerifySizePrefixedMapBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SourceMapSchema::Map>(nullptr);
}

inline void FinishMapBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SourceMapSchema::Map> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMapBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SourceMapSchema::Map> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace SourceMapSchema

#endif  // FLATBUFFERS_GENERATED_SOURCEMAPSCHEMA_SOURCEMAPSCHEMA_H_
